// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

enum GameState {
  NEUTRAL
  INCORRECT
  CLOSE
  CORRECT
}

model GameValidInput {
  id         Int          @id @default(autoincrement())
  vals       String[]
  GameConfig GameConfig[]
}

model GameCell {
  id          Int        @id @default(autoincrement())
  val         String
  posX        Int
  posY        Int
  width       Int
  height      Int
  foreground  String
  neutralBg   String
  closeBg     String
  correctBg   String
  incorrectBg String     @default("black")
  GameLine    GameLine[]
}

model GameLine {
  id         Int          @id @default(autoincrement())
  cell       GameCell     @relation(fields: [gameCellId], references: [id])
  cellsNumX  Int
  cellsNumY  Int
  height     Int
  width      Int
  gameCellId Int
  GameConfig GameConfig[]
}

model GameImgReplace {
  id             Int          @id @default(autoincrement())
  valToReplace   String[]
  imgUrlToInsert String[]
  GameConfig     GameConfig[]
}

model GameSolution {
  id           Int         @id @default(autoincrement())
  solution     String[]
  GameConfig   GameConfig? @relation(fields: [gameConfigId], references: [id])
  gameConfigId Int?
}

model GameConfig {
  id               Int             @id @default(autoincrement())
  name             String          @unique
  description      String          @default("")
  emoji            String
  bgImg            String
  solutions        GameSolution[]
  line             GameLine        @relation(fields: [gameLineId], references: [id])
  inputs           GameValidInput  @relation(fields: [gameValidInputId], references: [id])
  lineCount        Int
  gameLineId       Int
  gameValidInputId Int
  imgReplacer      GameImgReplace? @relation(fields: [gameImgReplaceId], references: [id])
  gameImgReplaceId Int?
  User             User?           @relation(fields: [userId], references: [id])
  userId           Int?
}

//----------------------------------------------------------------

model User {
  id        Int          @id @default(autoincrement())
  name      String?
  email     String?      @unique
  createdAt DateTime     @default(now()) @map(name: "created_at")
  updatedAt DateTime     @updatedAt @map(name: "updated_at")
  games     GameConfig[]

  @@map(name: "users")
}
